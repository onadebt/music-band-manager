openapi: 3.0.1
info:
  title: PA165 - Music Band Manager
  description: PA165 Spring 2025 student project - Music Band Manager
  version: 1.0.0
servers:
  - url: "http://localhost:8080"
tags:
  - name: BandService
components:
  schemas:
    BandDto:
      title: A musical band
      description: Object representing a musical band, with its manager and members
      properties:
        id: {type: integer, format: int64, description: band id}
        name: {type: string, description: name of the band, example: Rammstein}
        musicalStyle: {type: string, description: musical style played by the band, example: industrial metal }
        logo: {type: string, description: url of band logo, nullable: true }
        managerId: {type: integer, format: int64, description: id of the band manager}
        members: {type: array, items: {type: integer, format: int64}, description: array of member id's}

    BandInfoUpdateRequest:
      title: Request for change of band information
      description: Object containing newly updated band info, except members which are updated through dedicated api
      properties:
        id: {type: integer, format: int64, description: band id}
        name: {type: string, description: name of the band, example: Rammstein }
        musicalStyle: { type: string, description: musical style played by the band, example: industrial metal }
        logo: { type: string, description: url of band logo, nullable: true }
        managerId: { type: integer, format: int64, description: id of the band manager }

    BandOfferDto:
      title: Offer to join a band
      description: Object containing info regarding an offer to join a band
      properties:
        id: {type: integer, format: int64, description: id of band offer}
        bandId: {type: integer, format: int64, description: id of offering band}
        invitedMusicianId: {type: integer, format: int64, description: id of invited musician}
        offeringManagerId: {type: integer, format: int64,  description: id of offer manager}
        status: {type: string, description: status of the offer, enum: ["Pending", "Accepted", "Rejected"]}

    ErrorMessage:
      type: object
      description: Response body for HTML statuses
      properties:
        status: {type: integer, format: int64, description: HTTP status code, example: 404}
        error: {type: string, description: HTTP error description, example: not found}
        message: {type: string, description: message with further error description, example: invalid entity id}

paths:
  /api/bands/create:
    post:
      tags:
        - BandService
      summary: Creates a new band
      operationId: createBand
      parameters:
        - {name: name, in: query, required: true, schema: {type: string}, description: "name of the new music band"}
        - {name: musicalStyle, in: query, required: true, schema: {type: string}, description: "musical style played by the new band"}
        - {name: managerId, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of the manager of the new band"}
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandDto"
        "400":
          description: Cannot create given band
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /api/bands:
    get:
      tags:
        - BandService
      summary: Returns searched band
      operationId: getBand
      parameters:
        - {name: id, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of queried band"}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandDto"
        "404":
          description: Given band not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    post:
      tags:
        - BandService
      summary: Updates basic band info - managerId, name, logo, musicalStyle
      operationId: updateBand
      parameters:
        - { name: id, in: query, required: true, schema: { type: integer, format: int64 }, description: "Id of updated band" }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BandInfoUpdateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandDto"
        "404":
          description: Updated band not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "400":
          description: Band could not be updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /api/bands/offers/create:
    post:
      tags:
        - BandService
      summary: Publishes new offer to join band
      operationId: postBandOffer
      parameters:
        - {name: bandId, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of offered band"}
        - {name: invitedMusicianId, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of invited musician"}
        - {name: offeringManagerId, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of offering manager"}
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandOfferDto"
        "400":
          description: cannot create given offer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /api/bands/offers:
    get:
      tags:
        - BandService
      summary: Gets required offer
      operationId: getBandOffer
      parameters:
        - {name: offerId, in: query, required: true, schema: {type: integer, format: int64}, description: "Id of searched band offer"}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandOfferDto"
        "404":
          description: Given band offer cannot be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /api/bands/offers/accept:
    post:
      tags:
        - BandService
      summary: Accepts offer
      operationId: acceptBandOffer
      parameters:
        - { name: offerId, in: query, required: true, schema: { type: integer, format: int64 }, description: "Id of accepted band offer" }
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandOfferDto"
        "404":
          description: Band offer does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "400":
          description: Band offer could not be accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /api/bands/offers/reject:
    post:
      tags:
        - BandService
      summary: Rejects required offer
      operationId: rejectBandOffer
      parameters:
        - { name: offerId, in: query, required: true, schema: {type: integer, format: int64 }, description: "Id of rejected band offer"}
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandOfferDto"
        "404":
          description: Band offer does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "400":
          description: Band offer could not be rejected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
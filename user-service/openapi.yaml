openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8091
  description: Generated server url
tags:
- name: Manager
  description: Manager API
- name: Artist
  description: Artist API
paths:
  /api/managers/register:
    post:
      tags:
      - Manager
      summary: Register a new manager
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManagerDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManagerDTO"
  /api/managers/bands/{artistId}:
    post:
      tags:
      - Manager
      summary: Get a manager by username
      operationId: updateBands
      parameters:
      - name: artistId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
              uniqueItems: true
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManagerDTO"
  /api/artists/register:
    post:
      tags:
      - Artist
      summary: Register a new artist
      operationId: register_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArtistDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArtistDTO"
  /api/artists/bands/{artistId}:
    post:
      tags:
      - Artist
      summary: Update band IDs for an artist
      operationId: updateBands_1
      parameters:
      - name: artistId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
              uniqueItems: true
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArtistDTO"
  /api/managers/{id}:
    get:
      tags:
      - Manager
      summary: Get a manager by ID
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManagerDTO"
    delete:
      tags:
      - Manager
      summary: Update an existing manager
      operationId: deleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/managers/bands:
    get:
      tags:
      - Manager
      summary: Get managers by band IDs
      operationId: getManagersByBandIds
      parameters:
      - name: bandIds
        in: query
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ManagerDTO"
  /api/managers/all:
    get:
      tags:
      - Manager
      summary: Get a manager by username
      operationId: getAllManagers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ManagerDTO"
  /api/artists/{id}:
    get:
      tags:
      - Artist
      summary: Get an artist by ID
      operationId: getArtistById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArtistDTO"
    delete:
      tags:
      - Artist
      summary: Update an existing artist
      operationId: deleteArtist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/artists/username/{username}:
    get:
      tags:
      - Artist
      summary: Get an artist by username
      operationId: getArtistByUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArtistDTO"
  /api/artists/bands:
    get:
      tags:
      - Artist
      summary: Get artists by band IDs
      operationId: getArtistsByBandIds
      parameters:
      - name: bandIds
        in: query
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistDTO"
  /api/artists/all:
    get:
      tags:
      - Artist
      summary: Update an existing artist
      operationId: getAllArtists
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistDTO"
components:
  schemas:
    ManagerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          maxLength: 50
          minLength: 2
        role:
          type: string
          enum:
          - ARTIST
          - MANAGER
        password:
          type: string
        companyName:
          type: string
        managedBandIds:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
      required:
      - email
      - username
    ArtistDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          maxLength: 50
          minLength: 2
        role:
          type: string
          enum:
          - ARTIST
          - MANAGER
        password:
          type: string
        stageName:
          type: string
        bio:
          type: string
        skills:
          type: string
        bandIds:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
      required:
      - email
      - username
